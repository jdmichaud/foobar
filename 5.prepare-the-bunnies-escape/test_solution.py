import unittest

from solution import solution

class TestSolution(unittest.TestCase):
  def test_solution(self):
    test_cases = [{
      'input': {
        'matrix': [
          [0, 1, 1, 0],
          [0, 0, 0, 1],
          [1, 1, 0, 0],
          [1, 1, 1, 0]
        ],
      },
      'expected_outcome': 7,
    }, {
      'input': {
        'matrix': [
          [0, 0, 0, 0, 0, 0],
          [1, 1, 1, 1, 1, 0],
          [0, 0, 0, 0, 0, 0],
          [0, 1, 1, 1, 1, 1],
          [0, 1, 1, 1, 1, 1],
          [0, 0, 0, 0, 0, 0]
        ],
      },
      'expected_outcome': 11,
    }, {
      'input': {
        # Removing wall in (0, 1) shorten /a/ path but not the shortest path
        'matrix': [
          [0, 0, 0],
          [1, 0, 0],
          [0, 0, 0],
          [0, 1, 0],
        ],
      },
      'expected_outcome': 6,
    }, {
      'input': {
        'matrix': [
          [0, 0, 0],
          [0, 0, 0],
          [0, 0, 0],
        ],
      },
      'expected_outcome': 5,
    }, {
      'input': {
        # Some double walls
        'matrix': [
          [0, 0, 0, 0, 0, 0],
          [1, 1, 1, 1, 1, 0],
          [1, 0, 0, 0, 0, 0],
          [0, 0, 1, 1, 1, 1],
          [0, 1, 1, 1, 1, 1],
          [0, 0, 0, 0, 0, 0]
        ],
      },
      'expected_outcome': 13,
    }, {
      'input': {
        # Some walls are better to tear down than others
        'matrix': [
          [0, 0, 1, 0, 0, 0],
          [1, 0, 1, 0, 1, 0],
          [0, 0, 1, 0, 1, 0],
          [0, 1, 1, 0, 1, 0],
          [0, 1, 1, 0, 1, 0],
          [0, 0, 0, 0, 1, 0]
        ],
      },
      'expected_outcome': 11,
    }, {
      'input': {
        'matrix': [
          [0, 0],
          [1, 0],
        ],
      },
      'expected_outcome': 3,
    }, {
      'input': {
        'matrix': [
          [0, 0, 0, 0, 0, 0],
          [0, 1, 1, 1, 1, 0],
          [0, 1, 0, 0, 0, 0],
          [0, 1, 0, 1, 1, 1],
          [0, 1, 0, 1, 0, 0],
          [0, 0, 0, 1, 1, 0]
        ],
      },
      'expected_outcome': 11,
    }, {
      'input': {
        # Some walls are better to tear down than others
        'matrix': [
          [0, 0, 0],
          [1, 0, 0],
          [1, 1, 0],
          [0, 0, 0],
          [0, 1, 1],
          [0, 0, 0],
          [0, 1, 1],
          [0, 0, 0],
          [0, 1, 1],
          [0, 0, 0],
          [1, 1, 0],
          [0, 0, 0],
          [0, 1, 1],
          [0, 0, 0],
          [1, 1, 0],
          [1, 1, 0],
        ],
      },
      'expected_outcome': 22,
    }, {
      'input': {
        # Some walls are better to tear down than others
        'matrix': [
          [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
          [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1],
          [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0],
          [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0],
          [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0],
          [0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
          [1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0],
          [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0],
          [1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],
          [0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],
          [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0],
          [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0],
          [1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0],
          [0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
        ],
      },
      'expected_outcome': 51,
    }]

    # print('')
    for (index, test_case) in enumerate(test_cases):
      # print('test_case', index, test_case)
      self.assertEqual(
        solution(test_case['input']['matrix']),
        test_case['expected_outcome']
      )
